# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FqjGxl1az15bL5Bj_o8x5TLXz7SmCaH4
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py

from PIL import Image, ImageOps
import numpy as np
import tensorflow as tf
import streamlit as st
import os

# V√©rification des d√©pendances
try:
    st.set_page_config(layout="wide")
except Exception as e:
    st.warning(f"Erreur de configuration : {e}")

# Chargement du mod√®le
@st.cache_resource
def load_model():
    try:
        # Solution pour l'erreur DepthwiseConv2D
        custom_objects = {
            'DepthwiseConv2D': lambda **kwargs: tf.keras.layers.DepthwiseConv2D(
                **{k: v for k, v in kwargs.items() if k != 'groups'}
            )
        }
        
        with open('keras_model.h5', 'rb') as f:
            pass
            
        model = tf.keras.models.load_model(
            'keras_model.h5', 
            compile=False,
            custom_objects=custom_objects
        )
        st.success("Ce site est pr√™t √† l'emploi")
        return model
    except FileNotFoundError:
        st.error("ERREUR: Fichier keras_model.h5 introuvable")
    except Exception as e:
        st.error(f"ERREUR: {str(e)}")
    return None

model = load_model()
class_names = ['bus', 'camion,', 'minibus', 'suv']

# Interface utilisateur
st.title("üöó Syst√®me de reconnaissance de V√©hicules")
st.markdown("""
<style>
.stApp { max-width: 900px; margin: 0 auto; }
.st-bq { border-radius: 10px; }
</style>
""", unsafe_allow_html=True)
# V√©rification initiale
if not os.path.exists('keras_model.h5'):
    st.error("CRITIQUE: Le fichier keras_model.h5 est manquant!")
    st.stop()


# Fonction de pr√©traitement
def preprocess_image(image):
    try:
        size = (224, 224)
        image = ImageOps.fit(image, size, Image.Resampling.LANCZOS)
        image_array = np.asarray(image)
        normalized_image = (image_array.astype(np.float32) / 127.5) - 1
        return normalized_image
    except Exception as e:
        st.error(f"Erreur de pr√©traitement : {e}")
        return None

# Upload d'image
uploaded_file = st.file_uploader("Importez une image de v√©hicule...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None and model is not None:
    try:
        # Affichage image originale
        image = Image.open(uploaded_file).convert("RGB")
        st.image(image, caption='Image import√©e', width=300)

        # Pr√©traitement
        processed_image = preprocess_image(image)

        if processed_image is not None:
            # Pr√©diction
            data = np.expand_dims(processed_image, axis=0)
            prediction = model.predict(data)
            class_idx = np.argmax(prediction[0])
            confidence = prediction[0][class_idx]

            # R√©sultats
            st.success(f"""
            **Votre v√©hicule est un** {class_names[class_idx].upper()}
            
            **Confiance :** {confidence:.2%}
            """)

    except Exception as e:
        st.error(f"Une erreur est survenue : {e}")
